import streamlit as st
import os
import pandas as pd
from backend import (
    get_video_info,
    download_video,
    upload_to_dropbox
)

# Defina a configura√ß√£o da p√°gina (deve vir antes de qualquer comando que "desenhe" a p√°gina):
st.set_page_config(
    page_title="Meu Downloader de V√≠deos",  # Nome que aparecer√° na aba do navegador
    page_icon="üì∫",                       # Pode ser um emoji, ou uma URL de imagem
    layout="centered",                    # 'centered' ou 'wide'
    initial_sidebar_state="expanded"      # se quiser come√ßar com a barra lateral aberta
)

def main():
    # --- SIDEBAR ---
    st.sidebar.title("üé¨ Ferramenta P√∫blica de Download")
    st.sidebar.markdown("""
    **O que faz?**
    - Baixa v√≠deos ou √°udio (MP3) do YouTube.
    - Gera um **link** para voc√™ baixar o arquivo no seu dispositivo.
    
    **Instru√ß√µes**:
    1. Cole a URL do v√≠deo do YouTube.
    2. Clique em **Carregar Pr√©-Visualiza√ß√£o** para ver capa e dados.
    3. Escolha **V√≠deo** ou **√Åudio**.
    4. Clique em **Baixar & Enviar** para receber o link de download.
    """)

    st.title("Ferramenta de Download (via Dropbox) üéâ")

    video_url = st.text_input("Cole aqui o link do YouTube:", "")

    # Session state para guardar metadados e URL
    if "video_info" not in st.session_state:
        st.session_state.video_info = None
    if "video_url" not in st.session_state:
        st.session_state.video_url = ""

    # Bot√£o para pr√©-visualizar
    if st.button("üîç Carregar Pr√©-Visualiza√ß√£o"):
        user_input_url = video_url.strip()
        if user_input_url:
            try:
                info = get_video_info(user_input_url)
                st.session_state.video_info = info
                st.session_state.video_url = user_input_url
                st.success("Pr√©-visualiza√ß√£o carregada!")
            except Exception as e:
                # Aqui, se for um erro 403 ou algo espec√≠fico,
                # voc√™ pode checar, por ex: if "403" in str(e) ...
                st.error(f"Erro ao carregar metadados do v√≠deo (talvez bloqueado): {e}")
        else:
            st.warning("Por favor, insira um link v√°lido.")


    # Se j√° temos info do v√≠deo
    if st.session_state.video_info:
        info = st.session_state.video_info

        # Exibir thumbnail
        thumbnail = info.get("thumbnail")
        if thumbnail:
            # use_container_width em vez de use_column_width
            st.image(thumbnail, caption="Capa do V√≠deo", use_container_width=True)

        # T√≠tulo, canal, data, dura√ß√£o
        title = info.get("title", "Sem t√≠tulo")
        uploader = info.get("uploader", "Desconhecido")
        upload_date = info.get("upload_date")
        if upload_date and len(upload_date) == 8:
            # Converter para DD/MM/YYYY
            upload_date = f"{upload_date[6:]}/{upload_date[4:6]}/{upload_date[0:4]}"

        duration = info.get("duration", 0)
        if duration:
            mins, secs = divmod(duration, 60)
            hours, mins = divmod(mins, 60)
            if hours > 0:
                dur_str = f"{hours}h {mins}m {secs}s"
            else:
                dur_str = f"{mins}m {secs}s"
        else:
            dur_str = "Desconhecida"

        # Criar dataframe para exibir como tabela
        table_data = [
            {"Informa√ß√£o": "T√≠tulo", "Valor": title},
            {"Informa√ß√£o": "Canal", "Valor": uploader},
            {"Informa√ß√£o": "Data de Postagem", "Valor": upload_date if upload_date else "Desconhecida"},
            {"Informa√ß√£o": "Dura√ß√£o", "Valor": dur_str},
        ]
        df = pd.DataFrame(table_data).set_index("Informa√ß√£o")
        st.table(df)

        # Radio para escolher entre v√≠deo ou √°udio
        download_type = st.radio(
            "Escolha o tipo de download:",
            ["V√≠deo (MP4)", "√Åudio (MP3)"]
        )

        # Bot√£o de baixar
        if st.button("‚¨áÔ∏è Baixar & Enviar para Dropbox"):
            # Verifica se temos URL v√°lida
            real_url = st.session_state.video_url.strip()
            if not real_url:
                st.error("URL vazia. Carregue a pr√©-visualiza√ß√£o novamente.")
                return

            st.info("Baixando...")
            try:
                if download_type == "√Åudio (MP3)":
                    downloaded_file = download_video(real_url, download_type="audio")
                else:
                    downloaded_file = download_video(real_url, download_type="video")
            except Exception as e:
                st.error(f"Erro ao baixar: {e}")
                return

            if not downloaded_file or not os.path.exists(downloaded_file):
                st.error("N√£o foi poss√≠vel encontrar o arquivo baixado.")
                return

            # Upload
            st.info("Enviando ao Dropbox...")
            try:
                link = upload_to_dropbox(downloaded_file)
                st.success("Upload conclu√≠do! ‚úÖ")
                # For√ßar download
                link = link.replace("?dl=0", "?dl=1")
                st.markdown(f"[**Link para download**]({link})")
            except Exception as e:
                st.error(f"Erro ao enviar para Dropbox: {e}")
            finally:
                # Remove local
                if os.path.exists(downloaded_file):
                    os.remove(downloaded_file)

if __name__ == "__main__":
    main()
